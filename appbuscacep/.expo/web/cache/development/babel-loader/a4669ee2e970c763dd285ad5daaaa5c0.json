{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport api from \"./src/services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      cep = _useState2[0],\n      setCep = _useState2[1];\n\n  var inputRef = useRef(null);\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cepUser = _useState4[0],\n      setCepUser = _useState4[1];\n\n  function buscar() {\n    var response;\n    return _regeneratorRuntime.async(function buscar$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(cep == '')) {\n              _context.next = 4;\n              break;\n            }\n\n            alert('Digite um cep valido');\n            setCep('');\n            return _context.abrupt(\"return\");\n\n          case 4:\n            _context.prev = 4;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(api.get(\"/\" + cep + \"/json\"));\n\n          case 7:\n            response = _context.sent;\n            console.log(response.data);\n            setCepUser(response.data);\n            Keyboard.dismiss();\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](4);\n            console.log('ERROR: ' + _context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[4, 13]], Promise);\n  }\n\n  function limpar() {\n    setCep('');\n    inputRef.current.focus();\n    setCepUser(null);\n  }\n\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: {\n        alingItems: 'center'\n      },\n      children: [_jsx(Text, {\n        style: styles.text,\n        children: \"Digite o cep desejado\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Ex: 06663430\",\n        value: cep,\n        onChangeText: function onChangeText(texto) {\n          return setCep(texto);\n        },\n        keyboardType: \"numeric\",\n        ref: inputRef\n      })]\n    }), _jsxs(View, {\n      style: styles.areaBtn,\n      children: [_jsx(TouchableOpacity, {\n        style: [styles.botao, {\n          backgroundColor: '#1d75cd'\n        }],\n        onPress: buscar,\n        children: _jsx(Text, {\n          style: styles.botaoText,\n          children: \"Buscar\"\n        })\n      }), _jsx(TouchableOpacity, {\n        style: [styles.botao, {\n          backgroundColor: '#cd3e1d'\n        }],\n        onPress: limpar,\n        children: _jsx(Text, {\n          style: styles.botaoText,\n          children: \"Limpar\"\n        })\n      })]\n    }), cepUser && _jsxs(View, {\n      style: styles.resultado,\n      children: [_jsxs(Text, {\n        style: styles.itemText,\n        children: [\"CEP: \", cepUser.cep]\n      }), _jsxs(Text, {\n        style: styles.itemText,\n        children: [\"Logradouro: \", cepUser.logradouro]\n      }), _jsxs(Text, {\n        style: styles.itemText,\n        children: [\"Bairro: \", cepUser.bairro]\n      }), _jsxs(Text, {\n        style: styles.itemText,\n        children: [\"Cidade: \", cepUser.localidade]\n      }), _jsxs(Text, {\n        style: styles.itemText,\n        children: [\"Estado: \", cepUser.uf]\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  text: {\n    marginTop: 25,\n    marginBottom: 15,\n    fontSize: 25,\n    fontWeight: 'bold'\n  },\n  input: {\n    backgroundColor: '#FFF',\n    borderWidth: 1,\n    borderColor: '#DDD',\n    borderRadius: 5,\n    width: '90%',\n    padding: 10,\n    fontSize: 18\n  },\n  areaBtn: {\n    alingItens: 'center',\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around'\n  },\n  botao: {\n    height: 50,\n    justifyContent: 'center',\n    alingItens: 'center',\n    padding: 15,\n    borderRadius: 5\n  },\n  botaoText: {\n    fontSize: 22,\n    color: '#FFF'\n  },\n  resultado: {\n    flex: 1,\n    justifyContent: 'center',\n    alingItens: 'center'\n  },\n  itemText: {\n    fontSize: 22\n  }\n});","map":{"version":3,"sources":["C:/Users/Aluno/Downloads/appbuscacep/App.js"],"names":["React","useState","useRef","api","App","cep","setCep","inputRef","cepUser","setCepUser","buscar","alert","get","response","console","log","data","Keyboard","dismiss","limpar","current","focus","styles","container","alingItems","text","input","texto","areaBtn","botao","backgroundColor","botaoText","resultado","itemText","logradouro","bairro","localidade","uf","StyleSheet","create","flex","marginTop","marginBottom","fontSize","fontWeight","borderWidth","borderColor","borderRadius","width","padding","alingItens","flexDirection","justifyContent","height","color"],"mappings":"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","sourcesContent":["import React, { useState, useRef} from 'react';\nimport {View, Text, TextInput, TouchableOpacity, StyleSheet, SafeAreaView, Keyboard} from 'react-native';\nimport api from './src/services/api';\n\nexport default function App() {\n  const [cep, setCep] = useState('');\n  const inputRef= useRef(null);\n  const [cepUser, setCepUser] = useState(null);\n\n  async function buscar(){\n    if(cep == ''){\n      alert('Digite um cep valido');\n      setCep('');\n      return; \n    }\n\n    try{\n      const response = await api.get(`/${cep}/json`);\n      console.log(response.data);\n      setCepUser(response.data);\n      Keyboard.dismiss(); \n\n    }catch(error){\n      console.log('ERROR: ' + error);\n    }\n\n  }\n\n  function limpar(){\n    setCep('');\n    inputRef.current.focus();\n    setCepUser(null);\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={{alingItems: 'center'}}>\n        <Text style={styles.text}>Digite o cep desejado</Text>\n        <TextInput\n        style={styles.input}\n        placeholder=\"Ex: 06663430\"\n        value={cep}\n        onChangeText={ (texto) => setCep(texto) }\n        keyboardType=\"numeric\"\n        ref={inputRef}\n        />\n      </View>\n\n      <View style={styles.areaBtn}>\n        <TouchableOpacity\n        style={[styles.botao, { backgroundColor: '#1d75cd'}]}\n        onPress={ buscar }\n        >\n          <Text style={styles.botaoText}>Buscar</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n        style={[styles.botao, { backgroundColor: '#cd3e1d' }]}\n        onPress={ limpar }\n        >\n          <Text style={styles.botaoText}>Limpar</Text>\n        </TouchableOpacity>\n      </View>\n\n      { cepUser &&\n      <View style={styles.resultado}>\n        <Text style={styles.itemText}>CEP: {cepUser.cep}</Text>\n        <Text style={styles.itemText}>Logradouro: {cepUser.logradouro}</Text>\n        <Text style={styles.itemText}>Bairro: {cepUser.bairro}</Text>\n        <Text style={styles.itemText}>Cidade: {cepUser.localidade}</Text>\n        <Text style={styles.itemText}>Estado: {cepUser.uf}</Text>\n      </View>\n      }\n\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  text:{\n    marginTop: 25,\n    marginBottom:15,\n    fontSize: 25,\n    fontWeight: 'bold'\n  },\n  input:{\n    backgroundColor: '#FFF',\n    borderWidth: 1,\n    borderColor: '#DDD',\n    borderRadius: 5,\n    width: '90%',\n    padding: 10,\n    fontSize: 18\n  },\n  areaBtn:{\n    alingItens: 'center',\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around'\n  },\n  botao:{\n    height: 50,\n    justifyContent: 'center',\n    alingItens: 'center',\n    padding: 15,\n    borderRadius: 5,\n  },\n  botaoText:{\n    fontSize: 22,\n    color:'#FFF'\n  },\n  resultado:{\n    flex:1,\n    justifyContent:'center',\n    alingItens:'center'\n  },\n  itemText:{\n    fontSize: 22,\n  }\n});\n"]},"metadata":{},"sourceType":"module"}